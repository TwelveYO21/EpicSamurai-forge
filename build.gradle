buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }

        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '[6.0,6.2)', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, 'epicsamurai.mixins.refmap.json'
    config 'epicsamurai.mixins.json'
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {url 'https://libs.azuredoom.com:4443/mods'}
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = "https://jitpack.io" }
    maven {
        name = "Sinytra"
        url = "https://maven.su5ed.dev/releases"
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation("com.github.llamalad7.mixinextras:mixinextras-forge:${mixinextras_version}")

    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")
    //implementation fg.deobf("mod.azure.azurelib:azurelib-forge-${minecraft_version}:${azurelib_version}")

    // Ars Nouveau
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curio_version}")

    compileOnly fg.deobf("com.hollingsworth.ars_nouveau:ars_nouveau-${minecraft_version}:${ars_version}")
    runtimeOnly fg.deobf("com.hollingsworth.ars_nouveau:ars_nouveau-${minecraft_version}:${ars_version}")

    // Create

    compileOnly fg.deobf("curse.maven:create-328085:${create_version}")
    runtimeOnly fg.deobf("curse.maven:create-328085:${create_version}")

    // Deeper and Darker

    runtimeOnly fg.deobf("curse.maven:deeperdarker-659011:${project.deeperdarker_file_id}")

    // Eldritch End

    //minecraftLibrary fg.deobf("dev.su5ed.sinytra:Connector:${sinytra_version}")
    //runtimeOnly fg.deobf("dev.su5ed.sinytra.fabric-api:fabric-api:${sinytra_fabricapi_version}")

    //compileOnly "some.fabric:mod:<version>"

    //compileOnly fg.deobf("curse.maven:eldritch-end-877553:${eldritch_end_fileid}")
    //runtimeOnly fg.deobf("curse.maven:eldritch-end-877553:${eldritch_end_fileid}")

    //compileOnly fg.deobf("curse.maven:necronomicon-586157:${necronomicon_fileid}")
    //runtimeOnly fg.deobf("curse.maven:necronomicon-586157:${necronomicon_fileid}")

    //runtimeOnly fg.deobf("curse.maven:azurelib-817423:${azurelib_fileid}")

    //runtimeOnly fg.deobf("mod.azure.azurelib:azurelib-forge-${minecraft_version}:${azurelib_version}")

    // Blood Magic

    implementation fg.deobf("curse.maven:blood-magic-224791:${bloodmagic_fileid}")


    // JEI

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // Patchouli

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // Irons Spellbooks

    //compileOnly fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:${spells_version}")
    //runtimeOnly fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:${spells_version}")


    // Aquaculture

    compileOnly fg.deobf("curse.maven:aquaculture-60028:${aquaculture_version}")
    runtimeOnly fg.deobf("curse.maven:aquaculture-60028:${aquaculture_version}")

    // Better Combat

    //runtimeOnly fg.deobf("curse.maven:better-combat-by-daedelus-639842:${bettercombat_version}-forge")
    //runtimeOnly fg.deobf("curse.maven:cloth-config-348521:${cloth_version}-forge")
    //runtimeOnly fg.deobf("curse.maven:playeranimator-658587:${playeranimator_version}-forge")

    // Epic Fight

    //runtimeOnly fg.deobf("curse.maven:epic-fight-mod-405076:${epicfight_version}")


    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version: forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        mod_authors: mod_authors, mod_description: mod_description
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
